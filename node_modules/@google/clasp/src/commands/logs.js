"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var dotfile_1 = require("../dotfile");
var utils_1 = require("../utils");
var auth_1 = require("../auth");
var urls_1 = require("../urls");
var chalk_1 = __importDefault(require("chalk"));
var open_1 = __importDefault(require("open"));
var inquirer_1 = require("../inquirer");
var padEnd = require('string.prototype.padend');
/**
 * Prints StackDriver logs from this Apps Script project.
 * @param cmd.json {boolean} If true, the command will output logs as json.
 * @param cmd.open {boolean} If true, the command will open the StackDriver logs website.
 * @param cmd.setup {boolean} If true, the command will help you setup logs.
 * @param cmd.watch {boolean} If true, the command will watch for logs and print them. Exit with ^C.
 */
exports.default = (function (cmd) { return __awaiter(_this, void 0, void 0, function () {
    var projectId, _a, url, POLL_INTERVAL_1;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _b.sent();
                return [4 /*yield*/, utils_1.getProjectSettings()];
            case 2:
                projectId = (_b.sent()).projectId;
                if (!cmd.setup) return [3 /*break*/, 4];
                return [4 /*yield*/, setupLogs()];
            case 3:
                _a = _b.sent();
                return [3 /*break*/, 5];
            case 4:
                _a = projectId;
                _b.label = 5;
            case 5:
                projectId = _a;
                if (!!projectId) return [3 /*break*/, 7];
                console.log(utils_1.LOG.NO_GCLOUD_PROJECT);
                return [4 /*yield*/, setupLogs()];
            case 6:
                projectId = _b.sent();
                console.log(utils_1.LOG.LOGS_SETUP);
                _b.label = 7;
            case 7:
                // If we're opening the logs, get the URL, open, then quit.
                if (cmd.open) {
                    url = urls_1.URL.LOGS(projectId);
                    console.log("Opening logs: " + url);
                    return [2 /*return*/, open_1.default(url, { wait: false })];
                }
                // Otherwise, if not opening StackDriver, load StackDriver logs.
                if (cmd.watch) {
                    POLL_INTERVAL_1 = 6000;
                    setInterval(function () {
                        var startDate = new Date();
                        startDate.setSeconds(startDate.getSeconds() - (10 * POLL_INTERVAL_1) / 1000);
                        fetchAndPrintLogs(cmd.json, projectId, startDate);
                    }, POLL_INTERVAL_1);
                }
                else {
                    fetchAndPrintLogs(cmd.json, projectId);
                }
                return [2 /*return*/];
        }
    });
}); });
/**
 * Prints log entries
 * @param entries {any[]} StackDriver log entries.
 */
// TODO: unnecessary export
function printLogs(entries, formatJson) {
    if (entries === void 0) { entries = []; }
    /**
     * This object holds all log IDs that have been printed to the user.
     * This prevents log entries from being printed multiple times.
     * StackDriver isn't super reliable, so it's easier to get generous chunk of logs and filter them
     * rather than filter server-side.
     * @see logs.data.entries[0].insertId
     */
    var logEntryCache = {};
    entries.reverse(); // print in syslog ascending order
    for (var i = 0; i < 50 && entries ? i < entries.length : i < 0; ++i) {
        var _a = entries[i], _b = _a.severity, severity = _b === void 0 ? '' : _b, _c = _a.timestamp, timestamp = _c === void 0 ? '' : _c, resource = _a.resource, _d = _a.textPayload, textPayload = _d === void 0 ? '' : _d, _e = _a.protoPayload, protoPayload = _e === void 0 ? {} : _e, _f = _a.jsonPayload, jsonPayload = _f === void 0 ? null : _f, _g = _a.insertId, insertId = _g === void 0 ? '' : _g;
        if (!resource || !resource.labels)
            return;
        var functionName = resource.labels.function_name;
        functionName = functionName ? padEnd(functionName, 15) : utils_1.ERROR.NO_FUNCTION_NAME;
        // tslint:disable-next-line:no-any
        var payloadData = '';
        if (formatJson) {
            payloadData = JSON.stringify(entries[i], null, 2);
        }
        else {
            var data = {
                textPayload: textPayload,
                // chokes on unmatched json payloads
                // jsonPayload: jsonPayload ? jsonPayload.fields.message.stringValue : '',
                jsonPayload: jsonPayload ? JSON.stringify(jsonPayload).substr(0, 255) : '',
                protoPayload: protoPayload,
            };
            payloadData = data.textPayload || data.jsonPayload || data.protoPayload || utils_1.ERROR.PAYLOAD_UNKNOWN;
            if (payloadData && payloadData['@type'] === 'type.googleapis.com/google.cloud.audit.AuditLog') {
                payloadData = utils_1.LOG.STACKDRIVER_SETUP;
                functionName = padEnd(protoPayload.methodName, 15);
            }
            if (payloadData && typeof payloadData === 'string') {
                payloadData = padEnd(payloadData, 20);
            }
        }
        var coloredStringMap = {
            ERROR: chalk_1.default.red(severity),
            INFO: chalk_1.default.cyan(severity),
            DEBUG: chalk_1.default.green(severity),
            NOTICE: chalk_1.default.magenta(severity),
            WARNING: chalk_1.default.yellow(severity),
        };
        var coloredSeverity = coloredStringMap[severity] || severity;
        coloredSeverity = padEnd(String(coloredSeverity), 20);
        // If we haven't logged this entry before, log it and mark the cache.
        if (!logEntryCache[insertId]) {
            console.log(coloredSeverity + " " + timestamp + " " + functionName + " " + payloadData);
            logEntryCache[insertId] = true;
        }
    }
}
exports.printLogs = printLogs;
// TODO: unnecessary export
function setupLogs() {
    return __awaiter(this, void 0, void 0, function () {
        var projectId, promise;
        return __generator(this, function (_a) {
            promise = new Promise(function (resolve, reject) {
                utils_1.getProjectSettings().then(function (projectSettings) {
                    console.log(utils_1.LOG.OPEN_LINK(utils_1.LOG.SCRIPT_LINK(projectSettings.scriptId)) + "\n");
                    console.log(utils_1.LOG.GET_PROJECT_ID_INSTRUCTIONS + "\n");
                    inquirer_1.projectIdPrompt()
                        .then(function (answers) {
                        projectId = answers.projectId;
                        var dotfile = dotfile_1.DOTFILE.PROJECT();
                        if (!dotfile)
                            return reject(utils_1.logError(null, utils_1.ERROR.SETTINGS_DNE));
                        dotfile
                            .read()
                            .then(function (settings) {
                            if (!settings.scriptId)
                                utils_1.logError(utils_1.ERROR.SCRIPT_ID_DNE);
                            dotfile.write(__assign({}, settings, { projectId: projectId }));
                            resolve(projectId);
                        })
                            .catch(function (err) {
                            reject(utils_1.logError(err));
                        });
                    })
                        .catch(function (err) {
                        console.log(err);
                        reject();
                    });
                });
            });
            promise.catch(function (err) {
                utils_1.spinner.stop(true);
                throw utils_1.logError(err);
            });
            return [2 /*return*/, promise];
        });
    });
}
exports.setupLogs = setupLogs;
/**
 * Fetches the logs and prints the to the user.
 * @param startDate {Date?} Get logs from this date to now.
 */
// TODO: unnecessary export
function fetchAndPrintLogs(formatJson, projectId, startDate) {
    return __awaiter(this, void 0, void 0, function () {
        var oauthSettings, filter, logs_1, parseResponse, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, auth_1.loadAPICredentials()];
                case 1:
                    oauthSettings = _a.sent();
                    utils_1.spinner.setSpinnerTitle("" + (oauthSettings.isLocalCreds ? utils_1.LOG.LOCAL_CREDS : '') + utils_1.LOG.GRAB_LOGS).start();
                    filter = '';
                    if (startDate) {
                        filter = "timestamp >= \"" + startDate.toISOString() + "\"";
                    }
                    // validate projectId
                    if (!projectId) {
                        return [2 /*return*/, utils_1.logError(null, utils_1.ERROR.NO_GCLOUD_PROJECT)];
                    }
                    if (!utils_1.isValidProjectId(projectId)) {
                        return [2 /*return*/, utils_1.logError(null, utils_1.ERROR.PROJECT_ID_INCORRECT(projectId))];
                    }
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, auth_1.logger.entries.list({
                            requestBody: {
                                resourceNames: ["projects/" + projectId],
                                filter: filter,
                                orderBy: 'timestamp desc',
                            },
                        })];
                case 3:
                    logs_1 = _a.sent();
                    // We have an API response. Now, check the API response status.
                    utils_1.spinner.stop(true);
                    // Only print filter if provided.
                    if (filter.length) {
                        console.log(filter);
                    }
                    parseResponse = function (response) {
                        if (logs_1.status !== 200) {
                            switch (logs_1.status) {
                                case 401:
                                    utils_1.logError(null, oauthSettings.isLocalCreds ? utils_1.ERROR.UNAUTHENTICATED_LOCAL : utils_1.ERROR.UNAUTHENTICATED);
                                case 403:
                                    utils_1.logError(null, oauthSettings.isLocalCreds ? utils_1.ERROR.PERMISSION_DENIED_LOCAL : utils_1.ERROR.PERMISSION_DENIED);
                                default:
                                    utils_1.logError(null, "(" + logs_1.status + ") Error: " + logs_1.statusText);
                            }
                        }
                        else {
                            printLogs(logs_1.data.entries, formatJson);
                        }
                    };
                    parseResponse(logs_1);
                    return [3 /*break*/, 5];
                case 4:
                    error_1 = _a.sent();
                    utils_1.spinner.stop(true);
                    utils_1.logError(null, utils_1.ERROR.PROJECT_ID_INCORRECT(projectId));
                    return [3 /*break*/, 5];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.fetchAndPrintLogs = fetchAndPrintLogs;
//# sourceMappingURL=data:application/json;base64,