#!/usr/bin/env node
"use strict";
/**
 * @license
 * Copyright Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * clasp – The Apps Script CLI
 */
var utils_1 = require("./utils");
var apis_1 = __importDefault(require("./commands/apis"));
var clone_1 = __importDefault(require("./commands/clone"));
var commander_1 = __importDefault(require("commander"));
var create_1 = __importDefault(require("./commands/create"));
var defaultCmd_1 = __importDefault(require("./commands/defaultCmd"));
var deploy_1 = __importDefault(require("./commands/deploy"));
var deployments_1 = __importDefault(require("./commands/deployments"));
var help_1 = __importDefault(require("./commands/help"));
var list_1 = __importDefault(require("./commands/list"));
var login_1 = __importDefault(require("./commands/login"));
var logout_1 = __importDefault(require("./commands/logout"));
var logs_1 = __importDefault(require("./commands/logs"));
var openCmd_1 = __importDefault(require("./commands/openCmd"));
var pull_1 = __importDefault(require("./commands/pull"));
var push_1 = __importDefault(require("./commands/push"));
var run_1 = __importDefault(require("./commands/run"));
var setting_1 = __importDefault(require("./commands/setting"));
var status_1 = __importDefault(require("./commands/status"));
var undeploy_1 = __importDefault(require("./commands/undeploy"));
var version_1 = __importDefault(require("./commands/version"));
var versions_1 = __importDefault(require("./commands/versions"));
// CLI
/**
 * Set global CLI configurations
 */
commander_1.default
    .name(utils_1.PROJECT_NAME)
    .usage("<command> [options]")
    .description(utils_1.PROJECT_NAME + " - The Apps Script CLI");
/**
 * Logs the user in. Saves the client credentials to an rc file.
 * @name login
 * @param {string?} [--no-localhost] Do not run a local server, manually enter code instead.
 * @param {string?} [--creds] Relative path to credentials (from GCP).
 * @example login (uses default clasp credentials)
 * @example login --creds credentials.json (uses your credentials file).
 * @see test
 */
commander_1.default
    .command('login')
    .description('Log in to script.google.com')
    .option('--no-localhost', 'Do not run a local server, manually enter code instead')
    .option('--creds <file>', 'Relative path to credentials (from GCP).')
    .action(utils_1.handleError(login_1.default));
/**
 * Logs out the user by deleteing client credentials.
 * @name logout
 * @example logout
 */
commander_1.default
    .command('logout')
    .description('Log out')
    .action(utils_1.handleError(logout_1.default));
/**
 * Creates a new script project.
 * @name create
 * @param {string?} [--title] An optional project title.
 * @param {string?} [--parentId] An optional project parent Id. The Drive ID of a parent file
 *   that the created script project is bound to. This is usually the ID of a
 *   Google Doc, Google Sheet, Google Form, or Google Slides file. If not set, a
 *   standalone script project is created.
 *   https://drive.google.com/open?id=<ID>
 * @param {string?} [--rootDir] Local root directory that store your project files.
 * @example create
 * @example create "My Script"
 * @example create "My Script" "1D_Gxyv*****************************NXO7o"
 * @see https://developers.google.com/apps-script/api/reference/rest/v1/projects/create
 */
commander_1.default
    .command('create')
    .description('Create a script')
    .option('--type <type>', 
// tslint:disable-next-line: max-line-length
'Creates a new Apps Script project attached to a new Document, Spreadsheet, Presentation, Form, or as a standalone script, web app, or API.')
    .option('--title <title>', 'The project title.')
    .option('--parentId <id>', 'A project parent Id.')
    .option('--rootDir <rootDir>', 'Local root directory in which clasp will store your project files.')
    .action(utils_1.handleError(create_1.default));
/**
 * Fetches a project and saves the script id locally.
 * @param {string?} [scriptId] The script ID to clone.
 * @param {string?} [versionNumber] The version of the script to clone.
 * @param {string?} [--rootDir] Local root directory that store your project files.
 */
commander_1.default
    .command('clone [scriptId] [versionNumber]')
    .description('Clone a project')
    .option('--rootDir <rootDir>', 'Local root directory in which clasp will store your project files.')
    .action(utils_1.handleError(clone_1.default));
/**
 * Fetches a project from either a provided or saved script id.
 * Updates local files with Apps Script project.
 * @name pull
 * @example pull
 */
commander_1.default
    .command('pull')
    .description('Fetch a remote project')
    .option('--versionNumber <version>', 'The version number of the project to retrieve.')
    .action(utils_1.handleError(pull_1.default));
/**
 * Force writes all local files to the script management server.
 * @name push
 * @desc Ignores files:
 * - That start with a .
 * - That don't have an accepted file extension
 * - That are ignored (filename matches a glob pattern in the ignore file)
 * @example push
 * @example push --force
 * @example push --watch
 */
commander_1.default
    .command('push')
    .description('Update the remote project')
    .option('-f, --force', 'Forcibly overwrites the remote manifest.')
    .option('-w, --watch', 'Watches for local file changes. Pushes when a non-ignored file changs.')
    .action(utils_1.handleError(push_1.default));
/**
 * Lists files that will be written to the server on `push`.
 * @name status
 * @desc Ignores files:
 * - That start with a .
 * - That don't have an accepted file extension
 * - That are ignored (filename matches a glob pattern in the ignore file)
 * @example status
 */
commander_1.default
    .command('status')
    .description('Lists files that will be pushed by clasp')
    .option('--json', 'Show status in JSON form')
    .action(utils_1.handleError(status_1.default));
/**
 * Opens the `clasp` project on script.google.com. Provide a `scriptId` to open a different script.
 * @name open
 * @param {string?} [scriptId] The optional script project to open.
 * @example open
 * @example open [scriptId]
 */
commander_1.default
    .command('open [scriptId]')
    .description('Open a script')
    .option('--webapp', 'Open web application in the browser')
    .option('--creds', 'Open the URL to create credentials')
    .action(utils_1.handleError(openCmd_1.default));
/**
 * List deployments of a script
 * @name deployments
 * @example deployments
 */
commander_1.default
    .command('deployments')
    .description('List deployment ids of a script')
    .action(utils_1.handleError(deployments_1.default));
/**
 * Creates a version and deploys a script.
 * The response gives the version of the deployment.
 * @name deploy
 * @example deploy (create new deployment and new version)
 * @example deploy --versionNumber 4 (create new deployment)
 * @example deploy --description "Updates sidebar logo." (deploy with description)
 * @example deploy --deploymentId 123 (create new version)
 * @example deploy -V 7 -d "Updates sidebar logo." -i 456
 */
commander_1.default
    .command('deploy')
    .description('Deploy a project')
    .option('-V, --versionNumber <version>', 'The project version') // we can't use `version` in subcommand
    .option('-d, --description <description>', 'The deployment description')
    .option('-i, --deploymentId <id>', 'The deployment ID to redeploy')
    .action(utils_1.handleError(deploy_1.default));
/**
 * Undeploys a deployment of a script.
 * @name undeploy
 * @param {string?} [deploymentId] The deployment ID.
 * @param {boolean?} all Setup StackDriver logs.
 * @example "undeploy" (undeploy the last deployment.)
 * @example "undeploy 123"
 * @example "undeploy --all"
 */
commander_1.default
    .command('undeploy [deploymentId]')
    .description('Undeploy a deployment of a project')
    .option('-a, --all', 'Undeploy all deployments')
    .action(utils_1.handleError(undeploy_1.default));
/**
 * Creates an immutable version of the script.
 * @name version
 * @param {string?} description The description of the script version.
 * @example version
 * @example version "Bump the version."
 */
commander_1.default
    .command('version [description]')
    .description('Creates an immutable version of the script')
    .action(utils_1.handleError(version_1.default));
/**
 * List versions of a script.
 * @name versions
 * @example versions
 */
commander_1.default
    .command('versions')
    .description('List versions of a script')
    .action(utils_1.handleError(versions_1.default));
/**
 * Lists your most recent 10 Apps Script projects.
 * @name list
 * @example list # helloworld1 – xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ...
 * @todo Add --all flag to list all projects.
 */
commander_1.default
    .command('list')
    .description('List App Scripts projects')
    .action(utils_1.handleError(list_1.default));
/**
 * Prints StackDriver logs.
 * @name logs
 * @param {boolean?} json Output logs in json format.
 * @param {boolean?} open Open StackDriver logs in a browser.
 * @param {boolean?} setup Setup StackDriver logs.
 */
commander_1.default
    .command('logs')
    .description('Shows the StackDriver logs')
    .option('--json', 'Show logs in JSON form')
    .option('--open', 'Open the StackDriver logs in the browser')
    .option('--setup', 'Setup StackDriver logs')
    .option('--watch', 'Watch and print new logs')
    .action(utils_1.handleError(logs_1.default));
/**
 * Remotely executes an Apps Script function.
 * This function runs your script in the cloud. You must supply
 * the functionName params. For now, it can
 * only run functions that do not require other authorization.
 * @name run
 * @param {string} functionName The function in the script that you want to run.
 * @param {boolean?} nondev Run script function in non-devMode.
 * @example run 'sendEmail'
 * @see https://developers.google.com/apps-script/api/reference/rest/v1/scripts/run
 * @requires `clasp login --creds` to be run beforehand.
 */
commander_1.default
    .command('run [functionName]')
    .description('Run a function in your Apps Scripts project')
    .option('--nondev', 'Run script function in non-devMode')
    .option('-p, --params [StringArray]', 'Add parameters required for the function as a JSON String Array')
    .action(utils_1.handleError(run_1.default));
/**
 * List, enable, or disable APIs for your project.
 * Currently, only list is supported.
 * @name apis
 * @example apis list
 * @example apis enable drive
 */
commander_1.default
    .command('apis')
    .description("List, enable, or disable APIs\n  list\n  enable <api>\n  disable <api>")
    .option('--open', 'Open the API Console in the browser')
    .action(utils_1.handleError(apis_1.default));
/**
 * Displays the help function.
 * @name help
 * @example help
 */
commander_1.default
    .command('help')
    .description('Display help')
    .action(utils_1.handleError(help_1.default));
/**
 * Update .clasp.json settings file.
 * If `newValue` is omitted, it returns the current setting value
 * If `settingKey` is omitted, it returns all keys in .clasp.json
 * @name setting
 * @param {string?} settingKey They key in .clasp.json you want to change
 * @param {string?} newValue The new value for the setting
 * @example setting
 * @example setting scriptId
 * @example setting scriptId new-id
 */
commander_1.default
    .command('setting [settingKey] [newValue]')
    .alias('settings')
    .description('Update <settingKey> in .clasp.json')
    .action(utils_1.handleError(setting_1.default));
/**
 * All other commands are given a help message.
 * @example random
 */
commander_1.default
    .command('*', undefined, { isDefault: true })
    .description('Any other command is not supported')
    .action(utils_1.handleError(defaultCmd_1.default));
/**
 * Displays clasp version
 */
commander_1.default.option('-v, --version').on('option:version', function () {
    console.log(require('../package.json').version);
});
// defaults to help if commands are not provided
if (!process.argv.slice(2).length) {
    commander_1.default.outputHelp();
}
// User input is provided from the process' arguments
commander_1.default.parse(process.argv);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7Ozs7QUFFSDs7R0FFRztBQUVILGlDQUFvRDtBQUVwRCx5REFBbUM7QUFDbkMsMkRBQXFDO0FBQ3JDLHdEQUFrQztBQUNsQyw2REFBdUM7QUFDdkMscUVBQStDO0FBQy9DLDZEQUF1QztBQUN2Qyx1RUFBaUQ7QUFDakQseURBQW1DO0FBQ25DLHlEQUFtQztBQUNuQywyREFBcUM7QUFDckMsNkRBQXVDO0FBQ3ZDLHlEQUFtQztBQUNuQywrREFBeUM7QUFDekMseURBQW1DO0FBQ25DLHlEQUFtQztBQUNuQyx1REFBaUM7QUFDakMsK0RBQXlDO0FBQ3pDLDZEQUF1QztBQUN2QyxpRUFBMkM7QUFDM0MsK0RBQXlDO0FBQ3pDLGlFQUEyQztBQUUzQyxNQUFNO0FBRU47O0dBRUc7QUFDSCxtQkFBUztLQUNOLElBQUksQ0FBQyxvQkFBWSxDQUFDO0tBQ2xCLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQztLQUM1QixXQUFXLENBQUksb0JBQVksMkJBQXdCLENBQUMsQ0FBQztBQUV4RDs7Ozs7Ozs7R0FRRztBQUNILG1CQUFTO0tBQ04sT0FBTyxDQUFDLE9BQU8sQ0FBQztLQUNoQixXQUFXLENBQUMsNkJBQTZCLENBQUM7S0FDMUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLHdEQUF3RCxDQUFDO0tBQ2xGLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSwwQ0FBMEMsQ0FBQztLQUNwRSxNQUFNLENBQUMsbUJBQVcsQ0FBQyxlQUFLLENBQUMsQ0FBQyxDQUFDO0FBRTlCOzs7O0dBSUc7QUFDSCxtQkFBUztLQUNOLE9BQU8sQ0FBQyxRQUFRLENBQUM7S0FDakIsV0FBVyxDQUFDLFNBQVMsQ0FBQztLQUN0QixNQUFNLENBQUMsbUJBQVcsQ0FBQyxnQkFBTSxDQUFDLENBQUMsQ0FBQztBQUUvQjs7Ozs7Ozs7Ozs7Ozs7R0Fj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