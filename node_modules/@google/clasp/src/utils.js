"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var dotfile_1 = require("./dotfile");
var cli_spinner_1 = require("cli-spinner");
var urls_1 = require("./urls");
var chalk_1 = __importDefault(require("chalk"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var pluralize_1 = __importDefault(require("pluralize"));
var inquirer_1 = require("./inquirer");
var ucfirst = function (str) { return str && "" + str[0].toUpperCase() + str.slice(1); };
var isOnline = require('is-online');
// Names / Paths
exports.PROJECT_NAME = 'clasp';
exports.PROJECT_MANIFEST_BASENAME = 'appsscript';
exports.PROJECT_MANIFEST_FILENAME = exports.PROJECT_MANIFEST_BASENAME + '.json';
/**
 * Checks if OAuth client settings rc file exists.
 * @param  {boolean} local check ./clasprc.json instead of ~/.clasprc.json
 * @return {boolean}
 */
exports.hasOauthClientSettings = function (local) {
    if (local === void 0) { local = false; }
    return local ? fs_extra_1.default.existsSync(dotfile_1.DOT.RC.ABSOLUTE_LOCAL_PATH) : fs_extra_1.default.existsSync(dotfile_1.DOT.RC.ABSOLUTE_PATH);
};
/**
 * Gets the OAuth client settings from rc file.
 * @param {boolean} local If true, gets the local OAuth settings. Global otherwise.
 * ! Should be used instead of `DOTFILE.RC?().read()`
 * @returns {Promise<ClaspToken>} A promise to get the rc file as object.
 */
function getOAuthSettings(local) {
    var RC = (local) ? dotfile_1.DOTFILE.RC_LOCAL() : dotfile_1.DOTFILE.RC;
    return RC.read()
        .catch(function (err) {
        return exports.logError(err, exports.ERROR.NO_CREDENTIALS(local));
    });
}
exports.getOAuthSettings = getOAuthSettings;
// Error messages (some errors take required params)
exports.ERROR = {
    ACCESS_TOKEN: "Error retrieving access token: ",
    BAD_CREDENTIALS_FILE: 'Incorrect credentials file format.',
    BAD_REQUEST: function (message) { return "Error: " + message + "\nYour credentials may be invalid. Try logging in again."; },
    BAD_MANIFEST: "Error: Your " + exports.PROJECT_MANIFEST_FILENAME + " contains invalid JSON.",
    COMMAND_DNE: function (command) { return "\uD83E\uDD14  Unknown command \"" + exports.PROJECT_NAME + " " + command + "\"\n\nForgot " + exports.PROJECT_NAME + " commands? Get help:\n  " + exports.PROJECT_NAME + " --help"; },
    CONFLICTING_FILE_EXTENSION: function (name) { return "File names: " + name + ".js/" + name + ".gs conflict. Only keep one."; },
    CREATE_WITH_PARENT: 'Did you provide the correct parentId?',
    CREATE: 'Error creating script.',
    CREDENTIALS_DNE: function (filename) { return "Credentials file \"" + filename + "\" not found."; },
    DEPLOYMENT_COUNT: "Unable to deploy; Scripts may only have up to 20 versioned deployments at a time.",
    DRIVE: "Something went wrong with the Google Drive API",
    EXECUTE_ENTITY_NOT_FOUND: "Script API executable not published/deployed.",
    // FOLDER_EXISTS: `Project file already exists.`, // TEMP!
    FOLDER_EXISTS: "Project file (" + dotfile_1.DOT.PROJECT.PATH + ") already exists.",
    FS_DIR_WRITE: 'Could not create directory.',
    FS_FILE_WRITE: 'Could not write file.',
    INVALID_JSON: "Input params not Valid JSON string. Please fix and try again",
    LOGGED_IN_LOCAL: "Warning: You seem to already be logged in *locally*. You have a ./.clasprc.json",
    LOGGED_IN_GLOBAL: "Warning: You seem to already be logged in *globally*. You have a ~/.clasprc.json",
    LOGGED_OUT: "\nCommand failed. Please login. (" + exports.PROJECT_NAME + " login)",
    LOGS_NODATA: 'StackDriver logs query returned no data.',
    LOGS_UNAVAILABLE: 'StackDriver logs are getting ready, try again soon.',
    NO_API: function (enable, api) {
        return "API " + api + " doesn't exist. Try 'clasp apis " + (enable ? 'enable' : 'disable') + " sheets'.";
    },
    NO_CREDENTIALS: function (local) { return "Could not read API credentials. " +
        ("Are you logged in " + (local ? 'locall' : 'globall') + "y?"); },
    NO_FUNCTION_NAME: 'N/A',
    NO_GCLOUD_PROJECT: "No projectId found in your " + dotfile_1.DOT.PROJECT.PATH + " file.",
    NO_LOCAL_CREDENTIALS: "Requires local crendetials:\n\n  " + exports.PROJECT_NAME + " login --creds <file.json>",
    NO_MANIFEST: function (filename) {
        return "Manifest: " + filename + " invalid. `create` or `clone` a project first.";
    },
    NO_NESTED_PROJECTS: '\nNested clasp projects are not supported.',
    NO_VERSIONED_DEPLOYMENTS: "No versioned deployments found in project.",
    NO_WEBAPP: function (deploymentId) { return "Deployment \"" + deploymentId + "\" is not deployed as WebApp."; },
    OFFLINE: 'Error: Looks like you are offline.',
    ONE_DEPLOYMENT_CREATE: 'Currently just one deployment can be created at a time.',
    PAYLOAD_UNKNOWN: 'Unknown StackDriver payload.',
    PERMISSION_DENIED_LOCAL: "Error: Permission denied. Be sure that you have:\n" +
        "- Added the necessary scopes needed for the API.\n" +
        "- Enabled the Apps Script API.\n" +
        "- Enable required APIs for project.",
    PERMISSION_DENIED: "Error: Permission denied. Enable the Apps Script API:\n" + urls_1.URL.SCRIPT_API_USER,
    RATE_LIMIT: 'Rate limit exceeded. Check quota.',
    RUN_NODATA: 'Script execution API returned no data.',
    READ_ONLY_DELETE: 'Unable to delete read-only deployment.',
    SCRIPT_ID_DNE: "No scriptId found in your " + dotfile_1.DOT.PROJECT.PATH + " file.",
    SCRIPT_ID_INCORRECT: function (scriptId) { return "The scriptId \"" + scriptId + "\" looks incorrect.\nDid you provide the correct scriptId?"; },
    SCRIPT_ID: "Could not find script.\nDid you provide the correct scriptId?\nAre you logged in to the correct account with the script?",
    SETTINGS_DNE: "\nNo valid " + dotfile_1.DOT.PROJECT.PATH + " project file. You may need to `create` or `clone` a project first.",
    UNAUTHENTICATED_LOCAL: "Error: Local client credentials unauthenticated. Check scopes/authorization.",
    UNAUTHENTICATED: 'Error: Unauthenticated request: Please try again.',
    UNKNOWN_KEY: function (key) { return "Unknown key \"" + key + "\""; },
    PROJECT_ID_INCORRECT: function (projectId) { return "The projectId \"" + projectId + "\" looks incorrect.\nDid you provide the correct projectID?"; },
};
// Log messages (some logs take required params)
exports.LOG = {
    ASK_PROJECT_ID: "What is your GCP projectId?",
    AUTH_CODE: 'Enter the code from that page here: ',
    // TODO: Make AUTH_PAGE_SUCCESSFUL show an HTML page with something useful!
    AUTH_PAGE_SUCCESSFUL: "Logged in! You may close this page. ",
    AUTH_SUCCESSFUL: "Authorization successful.",
    AUTHORIZE: function (authUrl) { return "\uD83D\uDD11 Authorize " + exports.PROJECT_NAME + " by visiting this url:\n" + authUrl + "\n"; },
    CLONE_SUCCESS: function (fileNum) { return "Cloned " + fileNum + " " + pluralize_1.default('files', fileNum) + "."; },
    CLONING: 'Cloning files...',
    CLONE_SCRIPT_QUESTION: 'Clone which script?',
    CREATE_SCRIPT_QUESTION: 'Create which script?',
    CREATE_DRIVE_FILE_FINISH: function (filetype, fileid) {
        return "Created new " + (getFileTypeName(filetype) || '(unknown type)') + ": " + urls_1.URL.DRIVE(fileid);
    },
    CREATE_DRIVE_FILE_START: function (filetype) {
        return "Creating new " + (getFileTypeName(filetype) || '(unknown type)') + "...";
    },
    CREATE_PROJECT_FINISH: function (filetype, scriptId) {
        return "Created new " + getScriptTypeName(filetype) + " script: " + urls_1.URL.SCRIPT(scriptId);
    },
    CREATE_PROJECT_START: function (title) { return "Creating new script: " + title + "..."; },
    CREDENTIALS_FOUND: 'Credentials found, using those to login...',
    CREDS_FROM_PROJECT: function (projectId) { return "Using credentials located here:\n" + urls_1.URL.CREDS(projectId) + "\n"; },
    DEFAULT_CREDENTIALS: 'No credentials given, continuing with default...',
    DEPLOYMENT_CREATE: 'Creating deployment...',
    DEPLOYMENT_DNE: 'No deployed versions of script.',
    DEPLOYMENT_LIST: function (scriptId) { return "Listing deployments..."; },
    DEPLOYMENT_START: function (scriptId) { return "Deploying project..."; },
    FILES_TO_PUSH: 'Files to push were:',
    FINDING_SCRIPTS_DNE: 'No script files found.',
    FINDING_SCRIPTS: 'Finding your scripts...',
    GRAB_LOGS: 'Grabbing logs...',
    GET_PROJECT_ID_INSTRUCTIONS: "Go to *Resource > Cloud Platform Project...* and copy your projectId\n(including \"project-id-\")",
    GIVE_DESCRIPTION: 'Give a description: ',
    LOCAL_CREDS: "Using local credentials: " + dotfile_1.DOT.RC.LOCAL_DIR + dotfile_1.DOT.RC.NAME + " \uD83D\uDD10 ",
    LOGIN: function (isLocal) { return "Logging in " + (isLocal ? 'locally' : 'globally') + "..."; },
    LOGS_SETUP: 'Finished setting up logs.\n',
    NO_GCLOUD_PROJECT: "No projectId found. Running " + exports.PROJECT_NAME + " logs --setup.",
    OPEN_CREDS: function (projectId) { return "Opening credentials page: " + urls_1.URL.CREDS(projectId); },
    OPEN_LINK: function (link) { return "Open this link: " + link; },
    OPEN_PROJECT: function (scriptId) { return "Opening script: " + urls_1.URL.SCRIPT(scriptId); },
    OPEN_WEBAPP: function (deploymentId) { return "Opening web application: " + deploymentId; },
    PULLING: 'Pulling files...',
    PUSH_FAILURE: 'Push failed. Errors:',
    PUSH_NO_FILES: 'No files to push.',
    PUSH_SUCCESS: function (numFiles) { return "Pushed " + numFiles + " " + pluralize_1.default('files', numFiles) + "."; },
    PUSH_WATCH_UPDATED: function (filename) { return "- Updated: " + filename; },
    PUSH_WATCH: 'Watching for changed files...\n',
    PUSHING: 'Pushing files...',
    SAVED_CREDS: function (isLocalCreds) {
        return isLocalCreds
            ? "Local credentials saved to: " + dotfile_1.DOT.RC.LOCAL_DIR + dotfile_1.DOT.RC.ABSOLUTE_LOCAL_PATH + ".\n" +
                "*Be sure to never commit this file!* It's basically a password."
            : "Default credentials saved to: " + dotfile_1.DOT.RC.PATH + " (" + dotfile_1.DOT.RC.ABSOLUTE_PATH + ").";
    },
    SCRIPT_LINK: function (scriptId) { return "https://script.google.com/d/" + scriptId + "/edit"; },
    SCRIPT_RUN: function (functionName) { return "Executing: " + functionName; },
    STACKDRIVER_SETUP: 'Setting up StackDriver Logging.',
    STATUS_IGNORE: 'Ignored files:',
    STATUS_PUSH: 'Not ignored files:',
    UNDEPLOYMENT_FINISH: function (deploymentId) { return "Undeployed " + deploymentId + "."; },
    UNDEPLOYMENT_ALL_FINISH: "Undeployed all deployments.",
    UNDEPLOYMENT_START: function (deploymentId) { return "Undeploying " + deploymentId + "..."; },
    VERSION_CREATE: 'Creating a new version...',
    VERSION_CREATED: function (versionNumber) { return "Created version " + versionNumber + "."; },
    VERSION_DESCRIPTION: function (_a) {
        var versionNumber = _a.versionNumber, description = _a.description;
        return versionNumber + " - " + (description || '(no description)');
    },
    VERSION_NUM: function (numVersions) { return "~ " + numVersions + " " + pluralize_1.default('Version', numVersions) + " ~"; },
    SETUP_LOCAL_OAUTH: function (projectId) { return "1. Create a client ID and secret:\n    Open this link: " + chalk_1.default.blue(urls_1.URL.CREDS(projectId)) + "\n    Click " + chalk_1.default.cyan('Create credentials') + ", then select " + chalk_1.default.yellow('OAuth client ID') + ".\n    Select " + chalk_1.default.yellow('Other') + ".\n    Give the client a " + chalk_1.default.yellow('name') + ".\n    Click " + chalk_1.default.cyan('Create') + ".\n    Click " + chalk_1.default.cyan('Download JSON') + " for the new client ID: " + chalk_1.default.yellow('name') + " (right-hand side).\n\n2. Authenticate clasp with your credentials json file:\n    clasp login --creds <client_credentials.json>"; },
};
exports.spinner = new cli_spinner_1.Spinner();
/**
 * Logs errors to the user such as unauthenticated or permission denied
 * @param  {object} err         The object from the request's error
 * @param  {string} description The description of the error
 */
// tslint:disable-next-line:no-any
exports.logError = function (err, description) {
    if (description === void 0) { description = ''; }
    exports.spinner.stop(true);
    // Errors are weird. The API returns interesting error structures.
    // TODO(timmerman) This will need to be standardized. Waiting for the API to
    // change error model. Don't review this method now.
    if (err && typeof err.error === 'string') {
        exports.logError(null, JSON.parse(err.error).error);
    }
    else if ((err && err.statusCode === 401) ||
        (err && err.error && err.error.error && err.error.error.code === 401)) {
        // TODO check if local creds exist:
        //  localOathSettingsExist() ? ERROR.UNAUTHENTICATED : ERROR.UNAUTHENTICATED_LOCAL
        exports.logError(null, exports.ERROR.UNAUTHENTICATED);
    }
    else if (err && ((err.error && err.error.code === 403) || err.code === 403)) {
        // TODO check if local creds exist:
        //  localOathSettingsExist() ? ERROR.PERMISSION_DENIED : ERROR.PERMISSION_DENIED_LOCAL
        exports.logError(null, exports.ERROR.PERMISSION_DENIED);
    }
    else if (err && err.code === 429) {
        exports.logError(null, exports.ERROR.RATE_LIMIT);
    }
    else {
        if (err && err.error) {
            console.error("~~ API ERROR (" + (err.statusCode || err.error.code) + ")");
            console.error(err.error);
        }
        if (description)
            console.error(description);
    }
    return process.exit(1);
};
/**
 * Gets the web application URL from a deployment.
 *
 * It is too expensive to get the web application URL from the Drive API. (Async/not offline)
 * @param  {any} deployment The deployment
 * @return {string}          The URL of the web application in the online script editor.
 */
function getWebApplicationURL(deployment) {
    var entryPoints = deployment.entryPoints || [];
    var webEntryPoint = entryPoints.find(function (entryPoint) {
        return entryPoint.entryPointType === 'WEB_APP';
    });
    if (!webEntryPoint) {
        exports.logError(null, exports.ERROR.NO_WEBAPP(deployment.deploymentId || ''));
    }
    return webEntryPoint && webEntryPoint.webApp && webEntryPoint.webApp.url;
}
exports.getWebApplicationURL = getWebApplicationURL;
/**
 * Gets default project name.
 * @return {string} default project name.
 */
function getDefaultProjectName() {
    return ucfirst(path_1.default.basename(process.cwd()));
}
exports.getDefaultProjectName = getDefaultProjectName;
/**
 * Gets the project settings from the project dotfile. Logs errors.
 * ! Should be used instead of `DOTFILE.PROJECT().read()`
 * @param  {boolean} failSilently Don't err when dot file DNE.
 * @return {Promise<ProjectSettings>} A promise to get the project dotfile as object.
 */
function getProjectSettings(failSilently) {
    return __awaiter(this, void 0, void 0, function () {
        var promise;
        return __generator(this, function (_a) {
            promise = new Promise(function (resolve, reject) {
                var fail = function (failSilently) {
                    if (!failSilently) {
                        exports.logError(null, exports.ERROR.SETTINGS_DNE);
                    }
                    resolve();
                };
                var dotfile = dotfile_1.DOTFILE.PROJECT();
                if (dotfile) {
                    // Found a dotfile, but does it have the settings, or is it corrupted?
                    dotfile
                        .read()
                        .then(function (settings) {
                        // Settings must have the script ID. Otherwise we err.
                        if (settings.scriptId) {
                            resolve(settings);
                        }
                        else {
                            // TODO: Better error message
                            fail(); // Script ID DNE
                        }
                    })
                        .catch(function (err) {
                        fail(failSilently); // Failed to read dotfile
                    });
                }
                else {
                    fail(); // Never found a dotfile
                }
            });
            promise.catch(function (err) {
                exports.logError(err);
            });
            return [2 /*return*/, promise];
        });
    });
}
exports.getProjectSettings = getProjectSettings;
/**
 * Gets the API FileType. Assumes the path is valid.
 * @param  {string} filePath  The file path
 * @return {string}           The API's FileType enum (uppercase), null if not valid.
 */
function getAPIFileType(filePath) {
    var extension = filePath.substr(filePath.lastIndexOf('.') + 1).toUpperCase();
    return extension === 'GS' || extension === 'JS' ? 'SERVER_JS' : extension;
}
exports.getAPIFileType = getAPIFileType;
/**
 * Checks if the network is available. Gracefully exits if not.
 */
function checkIfOnline() {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = process.env.HTTP_PROXY || process.env.HTTPS_PROXY;
                    if (_a) return [3 /*break*/, 2];
                    return [4 /*yield*/, isOnline()];
                case 1:
                    _a = (_b.sent());
                    _b.label = 2;
                case 2:
                    // If using a proxy, return true since `isOnline` doesn't work.
                    // @see https://github.com/googleapis/google-api-nodejs-client#using-a-proxy
                    if (_a) {
                        return [2 /*return*/, true];
                    }
                    return [2 /*return*/, exports.logError(null, exports.ERROR.OFFLINE)];
            }
        });
    });
}
exports.checkIfOnline = checkIfOnline;
/**
 * Saves the project settings in the project dotfile.
 * @param {ProjectSettings} newProjectSettings The project settings
 * @param {boolean} append Appends the settings if true.
 */
function saveProject(newProjectSettings, append) {
    if (append === void 0) { append = true; }
    return __awaiter(this, void 0, void 0, function () {
        var projectSettings;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!append) return [3 /*break*/, 2];
                    return [4 /*yield*/, getProjectSettings()];
                case 1:
                    projectSettings = _a.sent();
                    newProjectSettings = __assign({}, projectSettings, newProjectSettings);
                    _a.label = 2;
                case 2: return [2 /*return*/, dotfile_1.DOTFILE.PROJECT().write(newProjectSettings)];
            }
        });
    });
}
exports.saveProject = saveProject;
/**
 * Gets the script's Cloud Platform Project Id from project settings file or prompt for one.
 * @returns {Promise<string>} A promise to get the projectId string.
 */
function getProjectId(promptUser) {
    if (promptUser === void 0) { promptUser = true; }
    return __awaiter(this, void 0, void 0, function () {
        var projectSettings_1, err_1;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, getProjectSettings()];
                case 1:
                    projectSettings_1 = _a.sent();
                    if (projectSettings_1.projectId)
                        return [2 /*return*/, projectSettings_1.projectId];
                    if (!promptUser)
                        throw new Error('Project ID not found.');
                    console.log(exports.LOG.OPEN_LINK(exports.LOG.SCRIPT_LINK(projectSettings_1.scriptId)) + "\n");
                    console.log(exports.LOG.GET_PROJECT_ID_INSTRUCTIONS + "\n");
                    return [4 /*yield*/, inquirer_1.projectIdPrompt().then(function (answers) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        projectSettings_1.projectId = answers.projectId;
                                        return [4 /*yield*/, dotfile_1.DOTFILE.PROJECT().write(projectSettings_1)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 2:
                    _a.sent();
                    return [2 /*return*/, projectSettings_1.projectId || ''];
                case 3:
                    err_1 = _a.sent();
                    exports.logError(null, err_1.message);
                    return [3 /*break*/, 4];
                case 4: throw Error('Project ID not found');
            }
        });
    });
}
exports.getProjectId = getProjectId;
/**
 * Gets a human friendly Google Drive file type name.
 * @param {string} type The input file type. (i.e. docs, forms, sheets, slides)
 * @returns The name like "Google Docs".
 */
function getFileTypeName(type) {
    var name = {
        docs: 'Google Doc',
        forms: 'Google Form',
        sheets: 'Google Sheet',
        slides: 'Google Slide',
    };
    return name[type];
}
/**
 * Gets a human friendly script type name.
 * @param {string} type The Apps Script project type. (i.e. docs, forms, sheets, slides)
 * @returns The script type (i.e. "Google Docs Add-on")
 */
function getScriptTypeName(type) {
    var fileType = getFileTypeName(type);
    return fileType ? fileType + "s Add-on" : type;
}
/**
 * Handles error of each command.
 */
// tslint:disable-next-line:no-any
function handleError(command) {
    var _this = this;
    // tslint:disable-next-line:no-any
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(_this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, command.apply(void 0, args)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        exports.spinner.stop(true);
                        exports.logError(null, e_1.message);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
}
exports.handleError = handleError;
/**
 * Validate the project id.
 * @param {string} projectId The project id.
 * @returns {boolean} Is the project id valid
 */
function isValidProjectId(projectId) {
    return new RegExp(/^[a-z][a-z0-9\-]{5,29}$/).test(projectId);
}
exports.isValidProjectId = isValidProjectId;
/**
 * Gets valid JSON obj or throws error.
 * @param str JSON string.
 */
function getValidJSON(str) {
    try {
        return JSON.parse(str);
    }
    catch (error) {
        throw new Error(exports.ERROR.INVALID_JSON);
    }
}
exports.getValidJSON = getValidJSON;
//# sourceMappingURL=data:application/json;base64,