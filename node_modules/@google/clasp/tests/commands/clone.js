"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var functions_1 = require("../functions");
var mocha_1 = require("mocha");
var utils_1 = require("../../src/utils");
var urls_1 = require("../../src/urls");
var chai_1 = require("chai");
var fs_extra_1 = __importDefault(require("fs-extra"));
var child_process_1 = require("child_process");
mocha_1.describe('Test clasp clone <scriptId> function', function () {
    before(functions_1.setup);
    mocha_1.it('should clone a project with scriptId correctly', function () {
        functions_1.cleanup();
        var result = child_process_1.spawnSync(constants_1.CLASP, ['clone', constants_1.SCRIPT_ID], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should clone a project with scriptURL correctly', function () {
        functions_1.cleanup();
        var result = child_process_1.spawnSync(constants_1.CLASP, ['clone', urls_1.URL.SCRIPT(constants_1.SCRIPT_ID)], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should give an error on a non-existing project', function () {
        fs_extra_1.default.removeSync('./.clasp.json');
        var result = child_process_1.spawnSync(constants_1.CLASP, ['clone', 'non-existing-project'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.SCRIPT_ID);
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test clasp clone function', function () {
    before(functions_1.setup);
    mocha_1.it('should prompt for which script to clone correctly', function () {
        child_process_1.spawnSync('rm', ['.clasp.json']);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['clone'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Clone which script?');
    });
    mocha_1.it('should prompt which project to clone and clone it', function () {
        functions_1.cleanup();
        var result = child_process_1.spawnSync(constants_1.CLASP, ['clone'], { encoding: 'utf8', input: '\n' });
        chai_1.expect(result.stdout).to.contain('Clone which script?');
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should give an error if .clasp.json already exists', function () {
        fs_extra_1.default.writeFileSync('.clasp.json', '');
        var result = child_process_1.spawnSync(constants_1.CLASP, ['clone'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain('Project file (.clasp.json) already exists.');
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjbG9uZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDBDQUFnRDtBQUNoRCwwQ0FBOEM7QUFDOUMsK0JBQXFDO0FBRXJDLHlDQUF3QztBQUN4Qyx1Q0FBcUM7QUFDckMsNkJBQThCO0FBQzlCLHNEQUEwQjtBQUMxQiwrQ0FBMEM7QUFFMUMsZ0JBQVEsQ0FBQyxzQ0FBc0MsRUFBRTtJQUMvQyxNQUFNLENBQUMsaUJBQUssQ0FBQyxDQUFDO0lBQ2QsVUFBRSxDQUFDLGdEQUFnRCxFQUFFO1FBQ25ELG1CQUFPLEVBQUUsQ0FBQztRQUNWLElBQU0sTUFBTSxHQUFHLHlCQUFTLENBQ3RCLGlCQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUscUJBQVMsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUNsRCxDQUFDO1FBQ0YsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxVQUFFLENBQUMsaURBQWlELEVBQUU7UUFDcEQsbUJBQU8sRUFBRSxDQUFDO1FBQ1YsSUFBTSxNQUFNLEdBQUcseUJBQVMsQ0FDdEIsaUJBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFHLENBQUMsTUFBTSxDQUFDLHFCQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUM5RCxDQUFDO1FBQ0YsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENB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