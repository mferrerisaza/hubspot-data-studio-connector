"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var utils_1 = require("../../src/utils");
var functions_1 = require("../functions");
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var fs_extra_1 = __importDefault(require("fs-extra"));
var child_process_1 = require("child_process");
mocha_1.describe('Test clasp login function', function () {
    before(functions_1.setup);
    beforeEach(functions_1.backupSettings);
    afterEach(functions_1.restoreSettings);
    mocha_1.it('should exit(0) with LOG.DEFAULT_CREDENTIALS for default login (no global or local rc)', function () {
        if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.rcGlobal))
            fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.rcLocal))
            fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcLocal);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--no-localhost'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain(utils_1.LOG.LOGIN(false));
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should ERROR.LOGGED_IN if global rc and no --creds option but continue to login', function () {
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.rcGlobal, constants_1.FAKE_CLASPRC.token);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--no-localhost'], { encoding: 'utf8' });
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.LOGGED_IN_GLOBAL);
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should exit(0) with ERROR.LOGGED_IN if local rc and --creds option', function () {
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.rcLocal, constants_1.FAKE_CLASPRC.local);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcLocal);
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.LOGGED_IN_LOCAL);
    });
    // TODO: this test needs to be updated
    mocha_1.it.skip('should exit(1) with ERROR.CREDENTIALS_DNE if --creds file does not exist', function () {
        if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.clientCredsLocal))
            fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.CREDENTIALS_DNE(constants_1.CLASP_PATHS.clientCredsLocal));
        chai_1.expect(result.status).to.equal(1);
    });
    // TODO: this test needs to be updated
    mocha_1.it.skip('should exit(1) with ERROR.BAD_CREDENTIALS_FILE if --creds file invalid', function () {
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.clientCredsLocal, constants_1.CLIENT_CREDS.invalid);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.BAD_CREDENTIALS_FILE);
        chai_1.expect(result.status).to.equal(1);
    });
    // TODO: this test needs to be updated
    mocha_1.it.skip('should exit(0) with ERROR.BAD_CREDENTIALS_FILE if --creds file corrupt json', function () {
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.clientCredsLocal, functions_1.rndStr());
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.BAD_CREDENTIALS_FILE);
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it('should exit(1) with LOG.CREDS_FROM_PROJECT if global rc and --creds file valid', function () {
        if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.rcLocal))
            fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcLocal);
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.rcGlobal, constants_1.FAKE_CLASPRC.token);
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.clientCredsLocal, constants_1.CLIENT_CREDS.fake);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        chai_1.expect(result.stdout).to.contain(utils_1.LOG.LOGIN(true));
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDBDQUE4RTtBQUM5RSx5Q0FBNkM7QUFDN0MsMENBQXVGO0FBQ3ZGLCtCQUFxQztBQUVyQyw2QkFBOEI7QUFDOUIsc0RBQTBCO0FBQzFCLCtDQUEwQztBQUUxQyxnQkFBUSxDQUFDLDJCQUEyQixFQUFFO0lBQ3BDLE1BQU0sQ0FBQyxpQkFBSyxDQUFDLENBQUM7SUFDZCxVQUFVLENBQUMsMEJBQWMsQ0FBQyxDQUFDO0lBQzNCLFNBQVMsQ0FBQywyQkFBZSxDQUFDLENBQUM7SUFDM0IsVUFBRSxDQUFDLHVGQUF1RixFQUFFO1FBQzFGLElBQUksa0JBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQVcsQ0FBQyxRQUFRLENBQUM7WUFBRSxrQkFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdFLElBQUksa0JBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQVcsQ0FBQyxPQUFPLENBQUM7WUFBRSxrQkFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNFLElBQU0sTUFBTSxHQUFHLHlCQUFTLENBQ3RCLGlCQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FDekQsQ0FBQztRQUNGLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbkQsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0gsVUFBRSxDQUFDLGlGQUFpRixFQUFFO1FBQ3BGLGtCQUFFLENB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