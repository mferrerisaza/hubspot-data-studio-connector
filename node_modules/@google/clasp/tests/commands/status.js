"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var functions_1 = require("../functions");
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var child_process_1 = require("child_process");
var tmp_1 = __importDefault(require("tmp"));
mocha_1.describe('Test clasp status function', function () {
    before(functions_1.setup);
    function setupTmpDirectory(filepathsAndContents) {
        fs_extra_1.default.ensureDirSync('tmp');
        var tmpdir = tmp_1.default.dirSync({ unsafeCleanup: true, dir: 'tmp/', keep: false }).name;
        filepathsAndContents.forEach(function (_a) {
            var file = _a.file, data = _a.data;
            fs_extra_1.default.outputFileSync(path_1.default.join(tmpdir, file), data);
        });
        return tmpdir;
    }
    mocha_1.it('should respect globs and negation rules', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.clasp.json', data: '{ "scriptId":"1234" }' },
            { file: '.claspignore', data: '**/**\n!build/main.js\n!appsscript.json' },
            { file: 'build/main.js', data: constants_1.TEST_CODE_JS },
            { file: 'appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON_WITHOUT_RUN_API },
            { file: 'shouldBeIgnored', data: constants_1.TEST_CODE_JS },
            { file: 'should/alsoBeIgnored', data: constants_1.TEST_CODE_JS },
        ]);
        // TODO: following `clasp create` serves no purpose
        // spawnSync(
        //   CLASP,
        //   ['create', '--type', 'Standalone', '--title', '"[TEST] clasp status"'],
        //   { encoding: 'utf8', cwd: tmpdir },
        // );
        var result = child_process_1.spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '.clasp.json',
            '.claspignore',
            'should/alsoBeIgnored',
            'shouldBeIgnored',
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['build/main.js', 'appsscript.json']);
    });
    mocha_1.it('should ignore dotfiles if the parent folder is ignored', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.clasp.json', data: '{ "scriptId":"1234" }' },
            { file: '.claspignore', data: '**/node_modules/**\n**/**\n!appsscript.json' },
            { file: 'appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON_WITHOUT_RUN_API },
            { file: 'node_modules/fsevents/build/Release/.deps/Release/.node.d', data: constants_1.TEST_CODE_JS },
        ]);
        // TODO: following `clasp create` serves no purpose
        // spawnSync(
        //   CLASP,
        //   ['create', '--type', 'Standalone', '--title', '"[TEST] clasp status"'],
        //   { encoding: 'utf8', cwd: tmpdir },
        // );
        var result = child_process_1.spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '.clasp.json',
            '.claspignore',
            'node_modules/fsevents/build/Release/.deps/Release/.node.d',
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['appsscript.json']);
    });
    mocha_1.it('should respect globs and negation rules when rootDir given', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.clasp.json', data: '{ "scriptId":"1234", "rootDir":"dist" }' },
            { file: '.claspignore', data: '**/**\n!build/main.js\n!appsscript.json' },
            { file: 'dist/build/main.js', data: constants_1.TEST_CODE_JS },
            { file: 'dist/appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON_WITHOUT_RUN_API },
            { file: 'dist/shouldBeIgnored', data: constants_1.TEST_CODE_JS },
            { file: 'dist/should/alsoBeIgnored', data: constants_1.TEST_CODE_JS },
        ]);
        // TODO: following `clasp create` serves no purpose
        // spawnSync(
        //   CLASP,
        //   ['create', '--type', 'Standalone', '--title', '"[TEST] clasp status"'],
        //   { encoding: 'utf8', cwd: tmpdir },
        // );
        var result = child_process_1.spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            'dist/should/alsoBeIgnored',
            'dist/shouldBeIgnored'
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['dist/build/main.js', 'dist/appsscript.json']);
    });
    mocha_1.it('should respect globs and negation rules when relative rootDir given', function () {
        var tmpdir = setupTmpDirectory([
            { file: 'src/.clasp.json', data: '{ "scriptId":"1234", "rootDir":"../build" }' },
            { file: 'src/.claspignore', data: '**/**\n!main.js\n!appsscript.json' },
            { file: 'build/main.js', data: constants_1.TEST_CODE_JS },
            { file: 'build/appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON_WITHOUT_RUN_API },
            { file: 'build/shouldBeIgnored', data: constants_1.TEST_CODE_JS },
            { file: 'build/should/alsoBeIgnored', data: constants_1.TEST_CODE_JS },
        ]);
        // TODO: following `clasp create` serves no purpose
        // spawnSync(
        //   CLASP,
        //   ['create', '--type', 'Standalone', '--title', '"[TEST] clasp status"'],
        //   { encoding: 'utf8', cwd: tmpdir },
        // );
        var result = child_process_1.spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir + '/src' });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '../build/should/alsoBeIgnored',
            '../build/shouldBeIgnored'
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['../build/main.js', '../build/appsscript.json']);
    });
    after(functions_1.cleanup);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMENBQXVGO0FBQ3ZGLDBDQUE4QztBQUM5QywrQkFBcUM7QUFFckMsNkJBQThCO0FBQzlCLHNEQUEwQjtBQUMxQiw4Q0FBd0I7QUFDeEIsK0NBQTBDO0FBQzFDLDRDQUFzQjtBQUV0QixnQkFBUSxDQUFDLDRCQUE0QixFQUFFO0lBQ3JDLE1BQU0sQ0FBQyxpQkFBSyxDQUFDLENBQUM7SUFDZCxTQUFTLGlCQUFpQixDQUFDLG9CQUEyRDtRQUNwRixrQkFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QixJQUFNLE1BQU0sR0FBRyxhQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNuRixvQkFBb0IsQ0FBQyxPQUFPLENBQUMsVUFBQyxFQUFjO2dCQUFaLGNBQUksRUFBRSxjQUFJO1lBQ3hDLGtCQUFFLENBQUMsY0FBYyxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUNELFVBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtRQUM1QyxJQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQztZQUMvQixFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLHVCQUF1QixFQUFFO1lBQ3RELEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUseUNBQXlDLEVBQUU7WUFDekUsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSx3QkFBWSxFQUFFO1lBQzdDLEVBQUUsSUFBSSxFQUFFLGlC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